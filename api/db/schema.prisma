// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  Memberships Membership[]
}

model Membership {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  Role           Role         @relation(fields: [roleId], references: [id])
  roleId         Int

  @@index([userId])
  @@index([organizationId])
  @@index([roleId])
}

model Organization {
  id      Int          @id @default(autoincrement())
  name    String
  Members Membership[]
  Posts   Post[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  Memberships Membership[]
  Scopes      RoleScope[]
}

model RoleScope {
  id      Int   @id @default(autoincrement())
  Role    Role  @relation(fields: [roleId], references: [id])
  roleId  Int
  Scope   Scope @relation(fields: [scopeId], references: [id])
  scopeId Int

  @@index([roleId])
  @@index([scopeId])
}

model Scope {
  id    Int         @id @default(autoincrement())
  name  String
  Roles RoleScope[]
}

model Post {
  id             Int          @id @default(autoincrement())
  title          String
  body           String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  @@index([organizationId])
}
